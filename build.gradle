buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.5"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id 'io.qameta.allure' version '2.5'
}

apply plugin: 'io.qameta.allure'

group 'io.iljapavlovs'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testCompile 'com.codeborne:selenide:5.0.1'
//    allure selenide listener
    testCompile 'io.qameta.allure:allure-selenide:2.8.1'
//    testCompile 'io.qameta.allure:allure-junit4:2.8.1'

    implementation('com.squareup.retrofit2:retrofit:2.5.0')
    implementation('com.squareup.retrofit2:converter-gson:2.5.0')
//    allure retrofit listener
    implementation('io.qameta.allure:allure-okhttp3:2.8.1')

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.2')
    testRuntimeOnly('io.qameta.allure:allure-junit5:2.8.1')

    testRuntimeOnly('org.slf4j:slf4j-simple:1.7.25')


}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


//allure {
//    autoconfigure = true
//    version = '2.8.1'
//}

allure {
    version = '2.7.0'
    autoconfigure = true
    aspectjweaver = true
//    allureJavaVersion = '2.4.1'
    clean = true
//    resultsDir = new File(project.getBuildDir(), "allure-results")
//    useJUnit4 {
//        version = '2.7.0'
//    }


//    https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.8.1/allure-2.8.1.zip - The requested path was not found.
    
//    downloadLink = 'https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.7.0/allure-2.7.0.zip'

}

test {
//    junit4
//    useJUnit()

//    junit5
    useJUnitPlatform()

    testLogging.showStandardStreams = true
    ignoreFailures = true

//    maxParallelForks = 3 // dont need since fork count set in junit-platform.properties


    // workaround for https://github.com/gradle/gradle/issues/6453
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

//    systemProperties['junit.jupiter.execution.parallel.enabled'] = false
//    systemProperties['junit.jupiter.execution.parallel.config.strategy'] = "fixed"
//    systemProperties['junit.jupiter.execution.parallel.config.fixed.parallelism'] = 3

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled': true,
            'junit.jupiter.execution.parallel.config.strategy': 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': 3
    ]

// Setting system properties
//   systemProperty 'junit.jupiter.conditions.deactivate', '*'
//    systemProperties = [
//            'junit.jupiter.extensions.autodetection.enabled': 'true',
//            'junit.jupiter.testinstance.lifecycle.default': 'per_class'
//    ]

    forkEvery = 1
}
